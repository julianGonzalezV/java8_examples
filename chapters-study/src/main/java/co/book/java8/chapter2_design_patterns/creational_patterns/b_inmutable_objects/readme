Problem::::
 How do we create <<<READ-ONLY clave :) >>> objects that can be shared and used by multiple classes?

Motivation::::
 Sometimes we want to create simple objects that can be shared across multiple
classes, but for security reasons we don’t want their value to be modifi ed. We could copy the
object before sending it to another method, but this creates a large overhead that duplicates
the object every time it is passed. Furthermore, if we have multiple threads accessing the same
object, we could run into concurrency issues, as you will see in Chapter 7 .

Solution::::
The immutable object pattern is a creational pattern based on the idea of
creating objects whose state does not change after they are created and can be easily shared
across multiple classes. Immutable objects go hand and hand with encapsulation, except
that no setter methods exist that modify the object. Since the state of an immutable object
never changes, they are inherently thread‐safe.

VER PG 82 Y 83 PARA DEFINIR immutable class,